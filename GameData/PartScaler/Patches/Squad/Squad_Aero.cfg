@PART[airbrake1] // A.I.R.B.R.A.K.E.S
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}

// ** Fairings **
// do not work yet (uncomment to test)
//@PART[fairingSize1] // AE-FF1 Airstream Protective Shell (1.25m)
//{
//    %MODULE[PartScaler]
//    {
//        type = stack_square
//        defaultScale = 1.25
//    }
//}
//@PART[fairingSize2] // AE-FF2 Airstream Protective Shell (2.5m)
//{
//    %MODULE[PartScaler]
//    {
//        type = stack_square
//        defaultScale = 2.5
//    }
//}
//@PART[fairingSize3] // AE-FF3 Airstream Protective Shell (3.75m)
//{
//    %MODULE[PartScaler]
//    {
//        type = stack_square
//        defaultScale = 3.75
//    }
//}

// ** Heat Shields **

@PART[HeatShield0] // Heat Shield (0.625m)
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 0.625
    }
}
@PART[HeatShield1] // Heat Shield (1.25m)
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 1.25
    }
}
@PART[HeatShield2] // Heat Shield (2.5m)
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 2.5
    }
}
@PART[HeatShield3] // Heat Shield (3.75m)
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 3.75
    }
}
@PART[InflatableHeatShield] // Heat Shield (10m)
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 2.5
    }
}

// ** Nose Cones **

@PART[standardNoseCone] // Standard NC
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 0.625
    }
}
@PART[noseCone] // Aerodynamic Nose Cone
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 1.25
    }
}
@PART[rocketNoseCone] // Protective Rocket Nose Mk7
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 2.5
    }
}
@PART[pointyNoseConeA] // Pointy Nose Cone A
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 1.25
    }
}
@PART[pointyNoseConeB] // Pointy Nose Cone B
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 1.25
    }
}

// ** Wings **

@PART[CanardController] // Standard Canard
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[deltaWing] // Delta Wing
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[delta_small] // Small Delta Wing
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}

@PART[airlinerCtrlSrf] // FAT-445 Aeroplane Control Surface
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[airlinerMainWing] // FAT-455 Aeroplane Main Wing
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[airlinerTailFin] // FAT-455 Aeroplane Tail Fin
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[basicFin] // Basic Fin
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[smallCtrlSrf] // Small Control Surface
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[sweptWing] // Swept Wings
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[tailfin] // Tail Fin
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[wingConnector] // Wing Connector
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[winglet] // AV-T1 Winglet
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[R8winglet] // AV-R8 Winglet
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[winglet3] // Delta-Deluxe Winglet
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[structuralWing4] // Structural Wing Type D
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[wingConnector5] // Wing Connector Type E
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[elevonMk3] // Mk3 Elevon
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[elevon5] // Elevon5
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[structuralWing] // Structural Wing
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[wingShuttleDelta] // Big-S Delta Wing
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[wingShuttleElevon1] // Big-S Elevon 1
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[wingShuttleElevon2] // Big-S Elevon 2
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[wingShuttleStrake] // Big-S Wing Strake
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[wingShuttleRudder] // Big-S Spaceplane Tail Fin
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[sweptWing1] // Swept Wing Type A
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[sweptWing2] // Swept Wing Type B
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[AdvancedCanard] // Advanced Canard
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[StandardCtrlSrf] // Standard Control Surface
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[wingConnector1] // SP+ Wing Connector type A
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[wingConnector2] // SP+ Wing Connector type B
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[wingConnector3] // SP+ Wing Connector type C
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[wingConnector4] // SP+ Wing Connector type D
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[deltaWingX] // SP+ Delta Wing
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[deltaWing_small] // SP+ Small Delta Wing
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[elevon1] // SP+ Elevon1
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[elevon2] // SP+ Elevon2
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[elevon3] // SP+ Elevon3
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[wingStrake] // SP+ Wing Strake
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[structuralWing1] // SP+ Structural Wing type A
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[structuralWing2] // SP+ Structural Wing type B
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[structuralWing3] // SP+ Structural Wing type C
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}

@PART[airplaneTail] // Tail Connector A
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 1.25
    }
}
@PART[airplaneTailB] // Tail Connector B
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 1.25
    }
}

// ** Intakes **

@PART[airScoop] // XM-G50 Radial Air Intake
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[miniIntake] // Small Circular Intake
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 0.625
    }
}
@PART[CircularIntake] // Circular Intake
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 1.25
    }
}
@PART[ramAirIntake] // Ram Air Intake
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 1.25
    }
}
@PART[MK1IntakeFuselage] // Mk1 Fuselage Intake
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 1.25
    }
}
@PART[IntakeRadialLong] // Structural Intake
{
    %MODULE[PartScaler]
    {
        type = free_square
    }
}
@PART[shockConeIntake] // Shock Cone Intake
{
    %MODULE[PartScaler]
    {
        type = stack_square
        defaultScale = 1.25
    }
}
